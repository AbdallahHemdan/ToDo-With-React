{"version":3,"sources":["components/listItem.jsx","App.js","serviceWorker.js","index.js"],"names":["listItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","action","setUpdate","target","icon","onClick","onDelete","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","handleAddItem","preventDefault","newItem","state","handleDelete","itemKey","filteredListItems","filter","valueToUpdate","keyToChange","placeholder","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAsCeA,MAhCf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BACIC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAAAC,GAAM,OAAIZ,EAAMa,UAAUD,EAAOE,OAAOL,MAAOL,EAAKE,QAElE,0BAAMD,UAAU,aACZ,kBAAC,IAAD,CACIA,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,SAASb,EAAKE,cAO3D,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,K,eC1BjBmB,IAAQC,IAAIC,K,IA6EGC,E,YA1Eb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAURwB,YAAc,SAAAZ,GACZ,EAAKa,SAAS,CACZC,YAAa,CACXhB,KAAME,EAAOE,OAAOL,MACpBH,IAAKqB,KAAKC,UAfG,EAmBnBC,cAAgB,SAAAjB,GACdA,EAAOkB,iBACP,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAqB,KAAjBK,EAAQrB,KAAa,CACvB,IAAMR,EAAK,sBAAO,EAAK8B,MAAM9B,OAAlB,CAAyB6B,IACpC,EAAKN,SAAS,CACZvB,QACAwB,YAAa,CACXhB,KAAM,GACNJ,IAAK,QA5BM,EAiCnB2B,aAAe,SAAAC,GACb,IAAMC,EAAoB,EAAKH,MAAM9B,MAAMkC,QACzC,SAAAhC,GAAI,OAAIA,EAAKE,MAAQ4B,KAEvB,EAAKT,SAAS,CAAEvB,MAAOiC,KArCN,EAuCnBtB,UAAY,SAACwB,EAAeC,GAC1B,IAAMpC,EAAQ,EAAK8B,MAAM9B,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQgC,IACflC,EAAKM,KAAO2B,MAGhB,EAAKZ,SAAS,CAAEvB,WA3ChB,EAAK8B,MAAQ,CACX9B,MAAO,GACPwB,YAAa,CACXhB,KAAM,GACNJ,IAAK,KAPQ,E,sEAiDjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMA,UAAU,cACd,2BACEE,KAAK,OACLgC,YAAY,kBACZ9B,MAAO+B,KAAKR,MAAMN,YAAYhB,KAC9BC,SAAU6B,KAAKhB,cAEjB,4BAAQjB,KAAK,SAASS,QAASwB,KAAKX,eAApC,SAKJ,kBAAC,EAAD,CACE3B,MAAOsC,KAAKR,MAAM9B,MAClBe,SAAUuB,KAAKP,aACfpB,UAAW2B,KAAK3B,iB,GApER4B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56dd3d9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./listItem.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport FlipMove from \"react-flip-move\";\r\n\r\n\r\nfunction listItem(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return (\r\n            <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input\r\n                        type=\"text\"\r\n                        id={item.key}\r\n                        value={item.text}\r\n                        onChange={action => props.setUpdate(action.target.value, item.key)}\r\n                    />\r\n                    <span className=\"trashIcon\">\r\n                        <FontAwesomeIcon\r\n                            className=\"faicons\"\r\n                            icon=\"trash\"\r\n                            onClick={() => props.onDelete(item.key)}\r\n                        />\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default listItem\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItem from \"./components/listItem\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\"\n      }\n    };\n  }\n  handleInput = action => {\n    this.setState({\n      currentItem: {\n        text: action.target.value,\n        key: Date.now()\n      }\n    });\n  };\n  handleAddItem = action => {\n    action.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items,\n        currentItem: {\n          text: \"\",\n          key: \"\"\n        }\n      });\n    }\n  };\n  handleDelete = itemKey => {\n    const filteredListItems = this.state.items.filter(\n      item => item.key !== itemKey\n    );\n    this.setState({ items: filteredListItems });\n  };\n  setUpdate = (valueToUpdate, keyToChange) => {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === keyToChange) {\n        item.text = valueToUpdate;\n      }\n    });\n    this.setState({ items });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form className=\"to-do-form\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter your task\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\" onClick={this.handleAddItem}>\n              Add\n            </button>\n          </form>\n        </header>\n        <ListItem\n          items={this.state.items}\n          onDelete={this.handleDelete}\n          setUpdate={this.setUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}